{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","this","props","movie","id","title","storyline","imagePath","rating","data-testid","src","alt","to","React","Component","Loading","movies","subtitle","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","MovieList","fetchMovies","a","setState","loading","state","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","className","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","deleteMovie","filter","status","movieAPI","match","params","fetchMovie","undefined","url","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","EditMovie","then","updatedMovie","NotFound","App","basename","process","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.698a6037.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, storyline, imagePath, rating } } = this.props;\n    return (\n      <div data-testid=\"movie-card\">\n        <h2>{ title }</h2>\n        <img src={ imagePath } alt=\"movie_image\" />\n        <p>{ storyline }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    bookmarked: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  fetchMovies = async () => {\n    const data = await movieAPI.getMovies();\n    if (data) {\n      this.setState({ movies: data, loading: false });\n    }\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (loading === true) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n    // console.log(this.props)\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    bookmarked: PropTypes.bool.isRequired,\n    genre: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    storyline: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: undefined,\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  deleteMovie = () => {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n\n    movieAPI.deleteMovie((id));\n  }\n\n  fetchMovie = async () => {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n\n    const data = await movieAPI.getMovie(id);\n\n    if (data) {\n      this.setState({ movie: data, loading: false });\n    }\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    const { movie, loading } = this.state;\n    const {\n      match: { url },\n    } = this.props;\n\n    if (loading === true) {\n      return <Loading />;\n    }\n\n    const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n    return (\n      <div data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>{ `Title: ${title}` }</p>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <Link to={ `${url}/edit` }>EDITAR</Link>\n        <Link to=\"/\">VOLTAR</Link>\n        <Link to=\"/\" onClick={ this.deleteMovie }>\n          DELETAR\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n    url: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\n\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      shouldRedirect: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      match: {\n        params: { id },\n      },\n    } = this.props;\n\n    movieAPI.getMovie(id)\n      .then((movie) => {\n        this.setState({\n          movie,\n          loading: false,\n        });\n      });\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie)\n      .then(() => {\n        this.setState({\n          shouldRedirect: true,\n        });\n      });\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (loading === true) {\n      // render Loading\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <div>Movie Card Library CRUD</div>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}